"-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

" ----------------------------------
"  Ref.vim
" ----------------------------------
let g:ref_refe_cmd = expand('~/Documents/Reference/ruby/refm-1.9.3/refe-1_9_3')
let g:ref_phpmanual_path = expand('~/document/reference/php-chunked-xhtml')

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
"<Leader>xでコメントをトグル(NERD_commenter.vim)
"map <Leader>x, c<space>
map <space><space> <Leader>c<space>
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1

" ------------------------------------
" grep.vim
"------------------------------------
" 検索外のディレクトリ、ファイルパターン
"let Grep_Skip_Dirs = '.svn .git .hg'
"let Grep_Skip_Files = '*.bak *~'

"------------------------------------
" surround.vim
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
"nmap s <Plug>Ysurround
"nmap ss <Plug>Yssurround
"let g:surround_{char2nr('e')} = "begin \r end"
"let g:surround_{char2nr('d')} = "do \r end"
"let g:surround_{char2nr("-")} = ":\r"

"------------------------------------
" Fugitive.vim
"------------------------------------
"nnoremap <Space>gd :<C-u>Gdiff<Enter>
"nnoremap <Space>gs :<C-u>Gstatus<Enter>
"nnoremap <Space>gl :<C-u>Glog<Enter>
"nnoremap <Space>ga :<C-u>Gwrite<Enter>
"nnoremap <Space>gc :<C-u>Gcommit<Enter>
"nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
"nnoremap <Space>gb :<C-u>Gblame<Enter>

"------------------------------------
" taglist.Vim
"------------------------------------
" 関数一覧
"let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags' " ctagsのパス
"let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
"let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
"" let Tlist_Use_Right_Window = 1            " 右側でtaglistのウィンドーを表示
"let Tlist_Enable_Fold_Column = 1          " 折りたたみ
"let Tlist_Auto_Open = 1                   " 自動表示
"let Tlist_Auto_Update = 1
"let Tlist_WinWidth = 30
""map <silent> <leader>tl :Tlist<CR>        " taglistを開くショットカットキー
"nmap <F7> :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
"nmap <Leader>tl :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>

"------------------------------------
" camelcasemotion.vim
"------------------------------------

" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
" text-objectで使用できるように
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie

"------------------------------------
" errormarker.vim
"------------------------------------
"" disable default shortcut mapping and re-define to <Leader>ec
"let g:errormarker_disablemappings = 1
"nmap <silent> <unique> <Leader>ec :ErrorAtCursor<CR>

"------------------------------------
" vimshell
"------------------------------------
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_right_prompt = 'vimshell#vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
let g:vimshell_enable_smart_case = 1

if has('win32') || has('win64')
  " Display user name on Windows.
  let g:vimshell_prompt = $USERNAME."% "
else
  " Display user name on Linux.
  let g:vimshell_prompt = $USER."% "

  call vimshell#set_execute_file('bmp,jpg,png,gif', 'gexe eog')
  call vimshell#set_execute_file('mp3,m4a,ogg', 'gexe amarok')
  let g:vimshell_execute_file_list['zip'] = 'zipinfo'
  call vimshell#set_execute_file('tgz,gz', 'gzcat')
  call vimshell#set_execute_file('tbz,bz2', 'bzcat')
endif

function! g:my_chpwd(args, context)
  call vimshell#execute('echo "chpwd"')
endfunction
function! g:my_emptycmd(cmdline, context)
  call vimshell#execute('echo "emptycmd"')
  return a:cmdline
endfunction
function! g:my_preprompt(args, context)
  call vimshell#execute('echo "preprompt"')
endfunction
function! g:my_preexec(cmdline, context)
  call vimshell#execute('echo "preexec"')

  if a:cmdline =~# '^\s*diff\>'
    call vimshell#set_syntax('diff')
  endif
  return a:cmdline
endfunction

autocmd FileType vimshell
\ call vimshell#altercmd#define('g', 'git')
\| call vimshell#altercmd#define('i', 'iexe')
\| call vimshell#altercmd#define('l', 'll')
\| call vimshell#altercmd#define('ll', 'ls -l')
\| call vimshell#hook#set('chpwd', ['g:my_chpwd'])
\| call vimshell#hook#set('emptycmd', ['g:my_emptycmd'])
\| call vimshell#hook#set('preprompt', ['g:my_preprompt'])
\| call vimshell#hook#set('preexec', ['g:my_preexec'])

command! Vs :VimShell


"------------------------------------
" unite.vim
"------------------------------------
" The prefix key.
nnoremap [unite] <Nop>
nmap ; [unite]

nnoremap [unite]u  :<C-u>Unite -no-split<Space>
" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
" ファイル一覧 リカーシブ
"nnoremap <silent> [unite]r  :<C-u>Unite -no-split -buffer-name=files file_rec<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
" 常用セット
"nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>
" 現在のバッファのディレクトリに新規ファイルを作成
noremap <silent> [unite]nd :<C-u>UniteWithBufferDir file file/new -buffer-name=file<CR>
" カレントディレクトリに新規ファイルを作成
noremap <silent> [unite]nf :<C-u>Unite file file/new -buffer-name=file<CR>

let g:yankring_zap_keys = ""
" from basyura/unite-rails
nnoremap <silent> [unite]rm  :<C-u>Unite -no-split rails/model<CR>
nnoremap <silent> [unite]rc  :<C-u>Unite -no-split rails/controller<CR>
nnoremap <silent> [unite]rv  :<C-u>Unite -no-split rails/view<CR>
nnoremap <silent> [unite]rl  :<C-u>Unite -no-split rails/lib<CR>
nnoremap <silent> [unite]rj  :<C-u>Unite -no-split rails/javascript<CR>
nnoremap <silent> [unite]rs  :<C-u>Unite -no-split rails/spec<CR>
nnoremap <silent> [unite]rh  :<C-u>Unite -no-split rails/helper<CR>

" 俺俺独自のUnite設定
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings() "{{{
  " Overwrite settings.

  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  "nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  "imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
  " Start insert.
  let g:unite_enable_start_insert = 1

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-s> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-s> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
  inoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
endfunction "}}}

let g:unite_source_file_mru_limit = 200

" unite-plugins
nnoremap <silent> [unite]h :<C-u>Unite help<CR>
" Unite-outline
nnoremap <C-o> :<C-u>Unite outline<CR>
nnoremap / :<C-u>Unite line<CR>

"------------------------------------
" quickrun.vim
"------------------------------------
let g:quickrun_config = {}
let g:quickrun_config._ = {'runner' : 'vimproc'}
let g:quickrun_config['rspec/bundle'] = {
  \ 'type': 'rspec/bundle',
  \ 'command': "rspec",
  \ 'cmdopt': "-l %{line('.')}",
  \ 'exec': "bundle exec %c %o %s ",
  \ 'filetype': 'rspec-result'
  \}
let g:quickrun_config['rspec/normal'] = {
  \ 'type': 'rspec/normal',
  \ 'command': "rspec",
  \ 'cmdopt': "-l %{line('.')}",
  \ 'exec': '%c %o %s',
  \ 'filetype': 'rspec-result'
  \}
function! RSpecQuickrun()
  let b:quickrun_config = {'type' : 'rspec/bundle'}
endfunction
autocmd BufReadPost *_spec.rb call RSpecQuickrun()

"------------------------------------
" Syntastic
"------------------------------------
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1

"------------------------------------
" vim-rails.vim
"------------------------------------
"let g:rails_some_option = 1
"let g:rails_level = 4
"let g:rails_syntax = 1
"let g:rails_statusline = 1
"let g:rails_url='http://localhost:3000'
"let g:rails_subversion=0
"" let g:dbext_default_SQLITE_bin = 'mysql2'
"let g:rails_default_file='config/database.yml'
"" let g:rails_ctags_arguments = ''
"function! SetUpRailsSetting()
"  nmap <buffer><C-C> <Nop>
"  imap <buffer><C-C> <Nop>
"  map <buffer><C-_><C-C> <Nop>
"
"  nmap <buffer><Space>r :R<CR>
"  nmap <buffer><Space>a :A<CR>
"  nmap <buffer><Space>m :Rmodel<Space>
"  nmap <buffer><Space>c :Rcontroller<Space>
"  nmap <buffer><Space>v :Rview<Space>
"  nmap <buffer><Space>s :Rspec<Space>
"  nmap <buffer><Space>p :Rpreview<CR>
"  nmap <buffer><Space>t :Runittest<CR>
"  au FileType ruby,eruby,ruby.rspec let g:neocomplcache_dictionary_filetype_lists = {
"        \'ruby' : $HOME.'/.vim/dict/rails.dict',
"        \'eruby' : $HOME.'/.vim/dict/rails.dict'
"        \}
"  setl dict+=~/.vim/dict/rails.dict
"  setl dict+=~/.vim/dict/ruby.dict
"endfunction
"autocmd User Rails call SetUpRailsSetting()

" -----------------------------------
" rsense
" -----------------------------------
let g:rsenseUseOmniFunc = 1
let g:rsenseHome = expand('~/dotfiles/.vim/bundle/rsense-0.3')
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'

"------------------------------------
" Syntastic
"------------------------------------
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1

"------------------------------------
" php-doc.vim
"------------------------------------
nnoremap <Leader>d :exe PhpDoc()<CR>i
vnoremap <Leader>d :exe PhpDocRange()<CR>
" Wether for PHP5 code PHP4 tags should be set, like @access,... (1|0)?
let g:pdv_cfg_php4always = 0
let g:pdv_cfg_php4guess = 0

"------------------------------------
" vim-php-namespace
"------------------------------------
" \u でuse句を追加
nnoremap <Leader>u :call PhpInsertUse()<CR>
" \e で完全な名前空間に変換
nnoremap <Leader>e :call PhpExpandClass()<CR>

"------------------------------------
" Command-T
"------------------------------------
set wildignore=cache,*.jpg,*.png,*.gif,*/inc/*,*.md,vendor
let g:CommandTMaxFiles=15000
